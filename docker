Create and manage volumes
docker volume create my-vol
docker volume ls
docker volume inspect my-vol
docker volume rm my-vol
docker run -d \
  --name devtest \
  -v myvol2:/app \
  nginx:latest

docker inspect devtest
docker container stop devtest

docker container rm devtest

docker volume rm myvol2


docker run -d \
  --name=nginxtest \
  -v nginx-vol:/usr/share/nginx/html \
  nginx:latest

docker run -d \
  --name devtest \
  --mount source=myvol2,target=/app \
  nginx:latest

docker run -d \
  -it \
  --name devtest \
  --mount type=bind,source="$(pwd)"/target,target=/app \
  nginx:latest

docker run -d \
  -it \
  --name devtest \
  -v "$(pwd)"/target:/app \
  nginx:latest











docker container stop nginxtest

docker container rm nginxtest

docker volume rm nginx-vol





RUN useradd -rm -d /home/ubuntu -s /bin/bash -g root -G sudo -u 1001 ubuntu
USER ubuntu
WORKDIR /home/ubuntu
==================================================
RUN useradd -ms /bin/bash newuser

USER newuser
WORKDIR /home/newuser

docker run -t -i image
newuser@131b7ad86360:~$
============================================

Adding user in docker and running your app under that user is very good practice for security point of view. To do that I would recommend below steps:

FROM node:10-alpine

# Copy source to container
RUN mkdir -p /usr/app/src

# Copy source code
COPY src /usr/app/src
COPY package.json /usr/app
COPY package-lock.json /usr/app

WORKDIR /usr/app

# Running npm install for production purpose will not run dev dependencies.
RUN npm install -only=production    

# Create a user group 'xyzgroup'
RUN addgroup -S xyzgroup

# Create a user 'appuser' under 'xyzgroup'
RUN adduser -S -D -h /usr/app/src appuser xyzgroup

# Chown all the files to the app user.
RUN chown -R appuser:xyzgroup /usr/app

# Switch to 'appuser'
USER appuser

# Open the mapped port
EXPOSE 3000

# Start the process
CMD ["npm", "start"]

===========================================================================
FROM centos:7
RUN useradd -u 1001 testuser
USER testuser
CMD ["/bin/sleep", "200"]
==============================
RUN useradd -ms /bin/bash toto_user
USER toto_user
# Use the official Node.js image as the base image
FROM node:14

# Create a system group named "user" with the -r flag
RUN groupadd -r user

# Create a system user named "user" and add it to the "user" group with the -r and -g flags
RUN useradd -r -g user user

# Set the working directory to /app
WORKDIR /app

# Change the ownership of the working directory to the non-root user "user"
RUN chown -R user:user /app

# Switch to the non-root user "user"
USER user

# Copy the application files to the container
COPY package.json .
COPY index.js .

# Install dependencies
RUN npm install

# Start the application
CMD ["npm", "start"]
======================================

